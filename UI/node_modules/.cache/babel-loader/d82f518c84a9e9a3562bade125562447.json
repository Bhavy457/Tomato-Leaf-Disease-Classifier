{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport PropTypes from 'prop-types';\nimport { createElement, Fragment, PureComponent } from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport clsx from 'clsx';\nimport Dropzone from 'react-dropzone';\nimport Chip from '@material-ui/core/Chip';\nimport Fab from '@material-ui/core/Fab';\nimport Grid from '@material-ui/core/Grid';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nfunction isImage(file) {\n  if (file.type.split('/')[0] === 'image') {\n    return true;\n  }\n}\n\nfunction convertBytesToMbsOrKbs(filesize) {\n  var size = '';\n\n  if (filesize >= 1048576) {\n    size = filesize / 1048576 + ' megabytes';\n  } else if (filesize >= 1024) {\n    size = filesize / 1024 + ' kilobytes';\n  } else {\n    size = filesize + ' bytes';\n  }\n\n  return size;\n}\n\nfunction createFileFromUrl(_x) {\n  return _createFileFromUrl.apply(this, arguments);\n}\n\nfunction _createFileFromUrl() {\n  _createFileFromUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n    var response, data, metadata, filename;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url);\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.blob();\n\n          case 5:\n            data = _context.sent;\n            metadata = {\n              type: data.type\n            };\n            filename = url.replace(/\\?.+/, '').split('/').pop();\n            return _context.abrupt(\"return\", new File([data], filename, metadata));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createFileFromUrl.apply(this, arguments);\n}\n\nfunction readFile(file) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n\n    reader.onload = function (event) {\n      var _event$target;\n\n      resolve(event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result);\n    };\n\n    reader.onerror = function (event) {\n      reader.abort();\n      reject(event);\n    };\n\n    reader.readAsDataURL(file);\n  });\n}\n\nvar styles = function styles(_ref) {\n  var palette = _ref.palette,\n      shape = _ref.shape,\n      spacing = _ref.spacing;\n  return {\n    root: {},\n    imageContainer: {\n      position: 'relative',\n      zIndex: 10,\n      textAlign: 'center',\n      '&:hover $image': {\n        opacity: 0.3\n      },\n      '&:hover $removeButton': {\n        opacity: 1\n      }\n    },\n    image: {\n      height: 100,\n      width: 'initial',\n      maxWidth: '100%',\n      color: palette.text.primary,\n      transition: 'all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms',\n      boxSizing: 'border-box',\n      boxShadow: 'rgba(0, 0, 0, 0.12) 0 1px 6px, rgba(0, 0, 0, 0.12) 0 1px 4px',\n      borderRadius: shape.borderRadius,\n      zIndex: 5,\n      opacity: 1\n    },\n    removeButton: {\n      transition: '.5s ease',\n      position: 'absolute',\n      opacity: 0,\n      top: spacing(-1),\n      right: spacing(-1),\n      width: 40,\n      height: 40,\n      '&:focus': {\n        opacity: 1\n      }\n    }\n  };\n};\n\nvar _ref5 = /*#__PURE__*/createElement(DeleteIcon, null);\n\nfunction PreviewList(_ref2) {\n  var fileObjects = _ref2.fileObjects,\n      handleRemove = _ref2.handleRemove,\n      showFileNames = _ref2.showFileNames,\n      useChipsForPreview = _ref2.useChipsForPreview,\n      previewChipProps = _ref2.previewChipProps,\n      previewGridClasses = _ref2.previewGridClasses,\n      previewGridProps = _ref2.previewGridProps,\n      classes = _ref2.classes,\n      getPreviewIcon = _ref2.getPreviewIcon;\n\n  if (useChipsForPreview) {\n    return createElement(Grid, _extends({\n      spacing: 1,\n      direction: \"row\"\n    }, previewGridProps.container, {\n      container: true,\n      className: clsx(classes.root, previewGridClasses.container)\n    }), fileObjects.map(function (fileObject, i) {\n      var _ref3, _fileObject$file;\n\n      return createElement(Grid, _extends({}, previewGridProps.item, {\n        item: true,\n        key: \"\".concat((_ref3 = (_fileObject$file = fileObject.file) === null || _fileObject$file === void 0 ? void 0 : _fileObject$file.name) !== null && _ref3 !== void 0 ? _ref3 : 'file', \"-\").concat(i),\n        className: classes.imageContainer\n      }), createElement(Chip, _extends({\n        variant: \"outlined\"\n      }, previewChipProps, {\n        label: fileObject.file.name,\n        onDelete: handleRemove(i)\n      })));\n    }));\n  }\n\n  return createElement(Grid, _extends({\n    spacing: 8\n  }, previewGridProps.container, {\n    container: true,\n    className: clsx(classes.root, previewGridClasses.container)\n  }), fileObjects.map(function (fileObject, i) {\n    var _ref4, _fileObject$file2;\n\n    return createElement(Grid, _extends({\n      xs: 4\n    }, previewGridProps.item, {\n      item: true,\n      key: \"\".concat((_ref4 = (_fileObject$file2 = fileObject.file) === null || _fileObject$file2 === void 0 ? void 0 : _fileObject$file2.name) !== null && _ref4 !== void 0 ? _ref4 : 'file', \"-\").concat(i),\n      className: clsx(classes.imageContainer, previewGridClasses.item)\n    }), getPreviewIcon(fileObject, classes), showFileNames && createElement(Typography, {\n      variant: \"body1\",\n      component: \"p\"\n    }, fileObject.file.name), createElement(Fab, {\n      onClick: handleRemove(i),\n      \"aria-label\": \"Delete\",\n      className: classes.removeButton\n    }, _ref5));\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? PreviewList.propTypes = {\n  classes: PropTypes.object.isRequired,\n  fileObjects: PropTypes.arrayOf(PropTypes.object).isRequired,\n  getPreviewIcon: PropTypes.func.isRequired,\n  handleRemove: PropTypes.func.isRequired,\n  previewChipProps: PropTypes.object,\n  previewGridClasses: PropTypes.object,\n  previewGridProps: PropTypes.object,\n  showFileNames: PropTypes.bool,\n  useChipsForPreview: PropTypes.bool\n} : void 0;\nvar PreviewList$1 = withStyles(styles, {\n  name: 'MuiDropzonePreviewList'\n})(PreviewList);\nvar variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\n\nvar styles$1 = function styles(theme) {\n  return {\n    successAlert: {\n      backgroundColor: theme.palette.success.main\n    },\n    errorAlert: {\n      backgroundColor: theme.palette.error.main\n    },\n    infoAlert: {\n      backgroundColor: theme.palette.info.main\n    },\n    warningAlert: {\n      backgroundColor: theme.palette.warning.main\n    },\n    message: {\n      display: 'flex',\n      alignItems: 'center',\n      '& > svg': {\n        marginRight: theme.spacing(1)\n      }\n    },\n    icon: {\n      fontSize: 20,\n      opacity: 0.9\n    },\n    closeButton: {}\n  };\n};\n\nfunction SnackbarContentWrapper(props) {\n  var classes = props.classes,\n      className = props.className,\n      message = props.message,\n      onClose = props.onClose,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"message\", \"onClose\", \"variant\"]);\n\n  var Icon = variantIcon[variant];\n  return createElement(SnackbarContent, _extends({\n    className: clsx(classes[\"\".concat(variant, \"Alert\")], className),\n    \"aria-describedby\": \"client-snackbar\",\n    message: createElement(\"span\", {\n      id: \"client-snackbar\",\n      className: classes.message\n    }, createElement(Icon, {\n      className: classes.icon\n    }), message),\n    action: [createElement(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"Close\",\n      color: \"inherit\",\n      className: classes.closeButton,\n      onClick: onClose\n    }, createElement(CloseIcon, {\n      className: classes.icon\n    }))]\n  }, other));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? SnackbarContentWrapper.propTypes = {\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  message: PropTypes.node,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired\n} : void 0;\nvar SnackbarContentWrapper$1 = withStyles(styles$1, {\n  name: 'MuiDropzoneSnackbar'\n})(SnackbarContentWrapper);\n\nvar styles$2 = function styles(_ref) {\n  var palette = _ref.palette,\n      shape = _ref.shape,\n      spacing = _ref.spacing;\n  return {\n    '@keyframes progress': {\n      '0%': {\n        backgroundPosition: '0 0'\n      },\n      '100%': {\n        backgroundPosition: '-70px 0'\n      }\n    },\n    root: {\n      position: 'relative',\n      width: '100%',\n      minHeight: '250px',\n      backgroundColor: palette.background.paper,\n      border: 'dashed',\n      borderColor: palette.divider,\n      borderRadius: shape.borderRadius,\n      boxSizing: 'border-box',\n      cursor: 'pointer',\n      overflow: 'hidden'\n    },\n    active: {\n      animation: '$progress 2s linear infinite !important',\n      // eslint-disable-next-line max-len\n      backgroundImage: \"repeating-linear-gradient(-45deg, \".concat(palette.background.paper, \", \").concat(palette.background.paper, \" 25px, \").concat(palette.divider, \" 25px, \").concat(palette.divider, \" 50px)\"),\n      backgroundSize: '150% 100%',\n      border: 'solid',\n      borderColor: palette.primary.light\n    },\n    invalid: {\n      // eslint-disable-next-line max-len\n      backgroundImage: \"repeating-linear-gradient(-45deg, \".concat(palette.error.light, \", \").concat(palette.error.light, \" 25px, \").concat(palette.error.dark, \" 25px, \").concat(palette.error.dark, \" 50px)\"),\n      borderColor: palette.error.main\n    },\n    textContainer: {\n      textAlign: 'center'\n    },\n    text: {\n      marginBottom: spacing(3),\n      marginTop: spacing(3)\n    },\n    icon: {\n      width: 51,\n      height: 51,\n      color: palette.text.primary\n    }\n  };\n};\n\nvar defaultSnackbarAnchorOrigin = {\n  horizontal: 'left',\n  vertical: 'bottom'\n};\n\nvar defaultGetPreviewIcon = function defaultGetPreviewIcon(fileObject, classes) {\n  if (isImage(fileObject.file)) {\n    return createElement(\"img\", {\n      className: classes.image,\n      role: \"presentation\",\n      src: fileObject.data\n    });\n  }\n\n  return createElement(AttachFileIcon, {\n    className: classes.image\n  });\n};\n/**\n * This components creates a Material-UI Dropzone, with previews and snackbar notifications.\n */\n\n\nvar DropzoneAreaBase = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DropzoneAreaBase, _React$PureComponent);\n\n  function DropzoneAreaBase() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DropzoneAreaBase);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropzoneAreaBase)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      openSnackBar: false,\n      snackbarMessage: '',\n      snackbarVariant: 'success'\n    };\n\n    _this.handleDropAccepted = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(acceptedFiles, evt) {\n        var _this$props, fileObjects, filesLimit, getFileAddedMessage, getFileLimitExceedMessage, onAdd, onDrop, fileObjs, message;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$props = _this.props, fileObjects = _this$props.fileObjects, filesLimit = _this$props.filesLimit, getFileAddedMessage = _this$props.getFileAddedMessage, getFileLimitExceedMessage = _this$props.getFileLimitExceedMessage, onAdd = _this$props.onAdd, onDrop = _this$props.onDrop;\n\n                if (!(filesLimit > 1 && fileObjects.length + acceptedFiles.length > filesLimit)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                _this.setState({\n                  openSnackBar: true,\n                  snackbarMessage: getFileLimitExceedMessage(filesLimit),\n                  snackbarVariant: 'error'\n                }, _this.notifyAlert);\n\n                return _context2.abrupt(\"return\");\n\n              case 4:\n                // Notify Drop event\n                if (onDrop) {\n                  onDrop(acceptedFiles, evt);\n                } // Retrieve fileObjects data\n\n\n                _context2.next = 7;\n                return Promise.all(acceptedFiles.map( /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n                    var data;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return readFile(file);\n\n                          case 2:\n                            data = _context.sent;\n                            return _context.abrupt(\"return\", {\n                              file: file,\n                              data: data\n                            });\n\n                          case 4:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x3) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }()));\n\n              case 7:\n                fileObjs = _context2.sent; // Notify added files\n\n                if (onAdd) {\n                  onAdd(fileObjs);\n                } // Display message\n\n\n                message = fileObjs.reduce(function (msg, fileObj) {\n                  return msg + getFileAddedMessage(fileObj.file.name);\n                }, '');\n\n                _this.setState({\n                  openSnackBar: true,\n                  snackbarMessage: message,\n                  snackbarVariant: 'success'\n                }, _this.notifyAlert);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.handleDropRejected = function (rejectedFiles, evt) {\n      var _this$props2 = _this.props,\n          acceptedFiles = _this$props2.acceptedFiles,\n          filesLimit = _this$props2.filesLimit,\n          fileObjects = _this$props2.fileObjects,\n          getDropRejectMessage = _this$props2.getDropRejectMessage,\n          getFileLimitExceedMessage = _this$props2.getFileLimitExceedMessage,\n          maxFileSize = _this$props2.maxFileSize,\n          onDropRejected = _this$props2.onDropRejected;\n      var message = '';\n\n      if (fileObjects.length + rejectedFiles.length > filesLimit) {\n        message = getFileLimitExceedMessage(filesLimit);\n      } else {\n        rejectedFiles.forEach(function (rejectedFile) {\n          message = getDropRejectMessage(rejectedFile, acceptedFiles, maxFileSize);\n        });\n      }\n\n      if (onDropRejected) {\n        onDropRejected(rejectedFiles, evt);\n      }\n\n      _this.setState({\n        openSnackBar: true,\n        snackbarMessage: message,\n        snackbarVariant: 'error'\n      }, _this.notifyAlert);\n    };\n\n    _this.handleRemove = function (fileIndex) {\n      return function (event) {\n        event.stopPropagation();\n        var _this$props3 = _this.props,\n            fileObjects = _this$props3.fileObjects,\n            getFileRemovedMessage = _this$props3.getFileRemovedMessage,\n            onDelete = _this$props3.onDelete; // Find removed fileObject\n\n        var removedFileObj = fileObjects[fileIndex]; // Notify removed file\n\n        if (onDelete) {\n          onDelete(removedFileObj, fileIndex);\n        }\n\n        _this.setState({\n          openSnackBar: true,\n          snackbarMessage: getFileRemovedMessage(removedFileObj.file.name),\n          snackbarVariant: 'info'\n        }, _this.notifyAlert);\n      };\n    };\n\n    _this.handleCloseSnackbar = function () {\n      _this.setState({\n        openSnackBar: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(DropzoneAreaBase, [{\n    key: \"notifyAlert\",\n    value: function notifyAlert() {\n      var onAlert = this.props.onAlert;\n      var _this$state = this.state,\n          openSnackBar = _this$state.openSnackBar,\n          snackbarMessage = _this$state.snackbarMessage,\n          snackbarVariant = _this$state.snackbarVariant;\n\n      if (openSnackBar && onAlert) {\n        onAlert(snackbarMessage, snackbarVariant);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          acceptedFiles = _this$props4.acceptedFiles,\n          alertSnackbarProps = _this$props4.alertSnackbarProps,\n          classes = _this$props4.classes,\n          disableRejectionFeedback = _this$props4.disableRejectionFeedback,\n          dropzoneClass = _this$props4.dropzoneClass,\n          dropzoneParagraphClass = _this$props4.dropzoneParagraphClass,\n          dropzoneProps = _this$props4.dropzoneProps,\n          dropzoneText = _this$props4.dropzoneText,\n          fileObjects = _this$props4.fileObjects,\n          filesLimit = _this$props4.filesLimit,\n          getPreviewIcon = _this$props4.getPreviewIcon,\n          Icon = _this$props4.Icon,\n          inputProps = _this$props4.inputProps,\n          maxFileSize = _this$props4.maxFileSize,\n          previewChipProps = _this$props4.previewChipProps,\n          previewGridClasses = _this$props4.previewGridClasses,\n          previewGridProps = _this$props4.previewGridProps,\n          previewText = _this$props4.previewText,\n          showAlerts = _this$props4.showAlerts,\n          showFileNames = _this$props4.showFileNames,\n          showFileNamesInPreview = _this$props4.showFileNamesInPreview,\n          showPreviews = _this$props4.showPreviews,\n          showPreviewsInDropzone = _this$props4.showPreviewsInDropzone,\n          useChipsForPreview = _this$props4.useChipsForPreview;\n      var _this$state2 = this.state,\n          openSnackBar = _this$state2.openSnackBar,\n          snackbarMessage = _this$state2.snackbarMessage,\n          snackbarVariant = _this$state2.snackbarVariant;\n      var acceptFiles = acceptedFiles === null || acceptedFiles === void 0 ? void 0 : acceptedFiles.join(',');\n      var isMultiple = filesLimit > 1;\n      var previewsVisible = showPreviews && fileObjects.length > 0;\n      var previewsInDropzoneVisible = showPreviewsInDropzone && fileObjects.length > 0;\n      return createElement(Fragment, null, createElement(Dropzone, _extends({}, dropzoneProps, {\n        accept: acceptFiles,\n        onDropAccepted: this.handleDropAccepted,\n        onDropRejected: this.handleDropRejected,\n        maxSize: maxFileSize,\n        multiple: isMultiple\n      }), function (_ref4) {\n        var getRootProps = _ref4.getRootProps,\n            getInputProps = _ref4.getInputProps,\n            isDragActive = _ref4.isDragActive,\n            isDragReject = _ref4.isDragReject;\n        return createElement(\"div\", getRootProps({\n          className: clsx(classes.root, dropzoneClass, isDragActive && classes.active, !disableRejectionFeedback && isDragReject && classes.invalid)\n        }), createElement(\"input\", getInputProps(inputProps)), createElement(\"div\", {\n          className: classes.textContainer\n        }, createElement(Typography, {\n          variant: \"h5\",\n          component: \"p\",\n          className: clsx(classes.text, dropzoneParagraphClass)\n        }, dropzoneText), Icon ? createElement(Icon, {\n          className: classes.icon\n        }) : createElement(CloudUploadIcon, {\n          className: classes.icon\n        })), previewsInDropzoneVisible && createElement(PreviewList$1, {\n          fileObjects: fileObjects,\n          handleRemove: _this2.handleRemove,\n          getPreviewIcon: getPreviewIcon,\n          showFileNames: showFileNames,\n          useChipsForPreview: useChipsForPreview,\n          previewChipProps: previewChipProps,\n          previewGridClasses: previewGridClasses,\n          previewGridProps: previewGridProps\n        }));\n      }), previewsVisible && createElement(Fragment, null, createElement(Typography, {\n        variant: \"subtitle1\",\n        component: \"span\"\n      }, previewText), createElement(PreviewList$1, {\n        fileObjects: fileObjects,\n        handleRemove: this.handleRemove,\n        getPreviewIcon: getPreviewIcon,\n        showFileNames: showFileNamesInPreview,\n        useChipsForPreview: useChipsForPreview,\n        previewChipProps: previewChipProps,\n        previewGridClasses: previewGridClasses,\n        previewGridProps: previewGridProps\n      })), (typeof showAlerts === 'boolean' && showAlerts || Array.isArray(showAlerts) && showAlerts.includes(snackbarVariant)) && createElement(Snackbar, _extends({\n        anchorOrigin: defaultSnackbarAnchorOrigin,\n        autoHideDuration: 6000\n      }, alertSnackbarProps, {\n        open: openSnackBar,\n        onClose: this.handleCloseSnackbar\n      }), createElement(SnackbarContentWrapper$1, {\n        onClose: this.handleCloseSnackbar,\n        variant: snackbarVariant,\n        message: snackbarMessage\n      })));\n    }\n  }]);\n\n  return DropzoneAreaBase;\n}(PureComponent);\n\nDropzoneAreaBase.defaultProps = {\n  acceptedFiles: [],\n  filesLimit: 3,\n  fileObjects: [],\n  maxFileSize: 3000000,\n  dropzoneText: 'Drag and drop a file here or click',\n  previewText: 'Preview:',\n  disableRejectionFeedback: false,\n  showPreviews: false,\n  // By default previews show up under in the dialog and inside in the standalone\n  showPreviewsInDropzone: true,\n  showFileNames: false,\n  showFileNamesInPreview: false,\n  useChipsForPreview: false,\n  previewChipProps: {},\n  previewGridClasses: {},\n  previewGridProps: {},\n  showAlerts: true,\n  alertSnackbarProps: {\n    anchorOrigin: {\n      horizontal: 'left',\n      vertical: 'bottom'\n    },\n    autoHideDuration: 6000\n  },\n  getFileLimitExceedMessage: function getFileLimitExceedMessage(filesLimit) {\n    return \"Maximum allowed number of files exceeded. Only \".concat(filesLimit, \" allowed\");\n  },\n  getFileAddedMessage: function getFileAddedMessage(fileName) {\n    return \"File \".concat(fileName, \" successfully added.\");\n  },\n  getPreviewIcon: defaultGetPreviewIcon,\n  getFileRemovedMessage: function getFileRemovedMessage(fileName) {\n    return \"File \".concat(fileName, \" removed.\");\n  },\n  getDropRejectMessage: function getDropRejectMessage(rejectedFile, acceptedFiles, maxFileSize) {\n    var message = \"File \".concat(rejectedFile.name, \" was rejected. \");\n\n    if (!acceptedFiles.includes(rejectedFile.type)) {\n      message += 'File type not supported. ';\n    }\n\n    if (rejectedFile.size > maxFileSize) {\n      message += 'File is too big. Size limit is ' + convertBytesToMbsOrKbs(maxFileSize) + '. ';\n    }\n\n    return message;\n  }\n};\nvar FileObjectShape = PropTypes.shape({\n  file: PropTypes.object,\n  data: PropTypes.any\n});\nprocess.env.NODE_ENV !== \"production\" ? DropzoneAreaBase.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n\n  /** A list of file types to accept.\n   * @see See [here](https://react-dropzone.js.org/#section-accepting-specific-file-types) for more details.\n   */\n  acceptedFiles: PropTypes.arrayOf(PropTypes.string),\n\n  /** Maximum number of files that can be loaded into the dropzone. */\n  filesLimit: PropTypes.number,\n\n  /** Icon to be displayed inside the dropzone area. */\n  Icon: PropTypes.elementType,\n\n  /** Currently loaded files. */\n  fileObjects: PropTypes.arrayOf(FileObjectShape),\n\n  /** Maximum file size (in bytes) that the dropzone will accept. */\n  maxFileSize: PropTypes.number,\n\n  /** Text inside the dropzone. */\n  dropzoneText: PropTypes.string,\n\n  /** Custom CSS class name for dropzone container. */\n  dropzoneClass: PropTypes.string,\n\n  /** Custom CSS class name for text inside the container. */\n  dropzoneParagraphClass: PropTypes.string,\n\n  /** Disable feedback effect when dropping rejected files. */\n  disableRejectionFeedback: PropTypes.bool,\n\n  /** Shows previews **BELOW** the dropzone. */\n  showPreviews: PropTypes.bool,\n\n  /** Shows preview **INSIDE** the dropzone area. */\n  showPreviewsInDropzone: PropTypes.bool,\n\n  /** Shows file name under the dropzone image. */\n  showFileNames: PropTypes.bool,\n\n  /** Shows file name under the image. */\n  showFileNamesInPreview: PropTypes.bool,\n\n  /** Uses deletable Material-UI Chip components to display file names. */\n  useChipsForPreview: PropTypes.bool,\n\n  /**\n   * Props to pass to the Material-UI Chip components.<br/>Requires `useChipsForPreview` prop to be `true`.\n   *\n   * @see See [Material-UI Chip](https://material-ui.com/api/chip/#props) for available values.\n   */\n  previewChipProps: PropTypes.object,\n\n  /**\n   * Custom CSS classNames for preview Grid components.<br/>\n   * Should be in the form {container: string, item: string, image: string}.\n   */\n  previewGridClasses: PropTypes.object,\n\n  /**\n   * Props to pass to the Material-UI Grid components.<br/>\n   * Should be in the form {container: GridProps, item: GridProps}.\n   *\n   * @see See [Material-UI Grid](https://material-ui.com/api/grid/#props) for available GridProps values.\n   */\n  previewGridProps: PropTypes.object,\n\n  /** The label for the file preview section. */\n  previewText: PropTypes.string,\n\n  /**\n   * Shows styled Material-UI Snackbar when files are dropped, deleted or rejected.\n   *\n   * - can be a boolean (\"global\" `true` or `false` for all alerts).\n   * - can be an array, with values 'error', 'info', 'success' to select to view only certain alerts:\n   *  - showAlerts={['error']} for only errors.\n   *  - showAlerts={['error', 'info']} for both errors and info.\n   *  - showAlerts={['error', 'success', 'info']} is same as showAlerts={true}.\n   *  - showAlerts={[]} is same as showAlerts={false}.\n   */\n  showAlerts: PropTypes.oneOfType([PropTypes.bool, PropTypes.arrayOf(PropTypes.oneOf(['error', 'success', 'info']))]),\n\n  /**\n   * Props to pass to the Material-UI Snackbar components.<br/>Requires `showAlerts` prop to be `true`.\n   *\n   * @see See [Material-UI Snackbar](https://material-ui.com/api/snackbar/#props) for available values.\n   */\n  alertSnackbarProps: PropTypes.object,\n\n  /**\n   * Props to pass to the Dropzone component.\n   *\n   * @see See [Dropzone props](https://react-dropzone.js.org/#src) for available values.\n   */\n  dropzoneProps: PropTypes.object,\n\n  /**\n   * Attributes applied to the input element.\n   *\n   * @see See [MDN Input File attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Additional_attributes) for available values.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Get alert message to display when files limit is exceed.\n   *\n   * *Default*: \"Maximum allowed number of files exceeded. Only ${filesLimit} allowed\"\n   *\n   * @param {number} filesLimit The `filesLimit` currently set for the component.\n   */\n  getFileLimitExceedMessage: PropTypes.func,\n\n  /**\n   * Get alert message to display when a new file is added.\n   *\n   * *Default*: \"File ${fileName} successfully added.\"\n   *\n   * @param {string} fileName The newly added file name.\n   */\n  getFileAddedMessage: PropTypes.func,\n\n  /**\n   * Get alert message to display when a file is removed.\n   *\n   * *Default*: \"File ${fileName} removed.\"\n   *\n   * @param {string} fileName The name of the removed file.\n   */\n  getFileRemovedMessage: PropTypes.func,\n\n  /**\n   * Get alert message to display when a file is rejected onDrop.\n   *\n   * *Default*: \"File ${rejectedFile.name} was rejected.\"\n   *\n   * @param {Object} rejectedFile The file that got rejected\n   * @param {string[]} acceptedFiles The `acceptedFiles` prop currently set for the component\n   * @param {number} maxFileSize The `maxFileSize` prop currently set for the component\n   */\n  getDropRejectMessage: PropTypes.func,\n\n  /**\n   * A function which determines which icon to display for a file preview.\n   *\n   * *Default*: If its an image then displays a preview the image, otherwise it will display an attachment icon\n   *\n   * @param {FileObject} objectFile The file which the preview will belong to\n   * @param {Object} classes The classes for the file preview icon, in the default case we use the 'image' className.\n   */\n  getPreviewIcon: PropTypes.func,\n\n  /**\n   * Fired when new files are added to dropzone.\n   *\n   * @param {FileObject[]} newFiles The new files added to the dropzone.\n   */\n  onAdd: PropTypes.func,\n\n  /**\n   * Fired when a file is deleted from the previews panel.\n   *\n   * @param {FileObject} deletedFileObject The file that was removed.\n   * @param {number} index The index of the removed file object.\n   */\n  onDelete: PropTypes.func,\n\n  /**\n   * Fired when the user drops files into the dropzone.\n   *\n   * @param {File[]} droppedFiles All the files dropped into the dropzone.\n   * @param {Event} event The react-dropzone drop event.\n   */\n  onDrop: PropTypes.func,\n\n  /**\n   * Fired when a file is rejected because of wrong file type, size or goes beyond the filesLimit.\n   *\n   * @param {File[]} rejectedFiles All the rejected files.\n   * @param {Event} event The react-dropzone drop event.\n   */\n  onDropRejected: PropTypes.func,\n\n  /**\n   * Fired when an alert is triggered.\n   *\n   * @param {string} message Alert message.\n   * @param {string} variant One of \"error\", \"info\", \"success\".\n   */\n  onAlert: PropTypes.func\n} : void 0;\nvar DropzoneAreaBase$1 = withStyles(styles$2, {\n  name: 'MuiDropzoneArea'\n})(DropzoneAreaBase);\n\nvar splitDropzoneAreaProps = function splitDropzoneAreaProps(props) {\n  var clearOnUnmount = props.clearOnUnmount,\n      initialFiles = props.initialFiles,\n      onChange = props.onChange,\n      onDelete = props.onDelete,\n      dropzoneAreaProps = _objectWithoutProperties(props, [\"clearOnUnmount\", \"initialFiles\", \"onChange\", \"onDelete\"]);\n\n  return [{\n    clearOnUnmount: clearOnUnmount,\n    initialFiles: initialFiles,\n    onChange: onChange,\n    onDelete: onDelete\n  }, dropzoneAreaProps];\n};\n/**\n * This components creates an uncontrolled Material-UI Dropzone, with previews and snackbar notifications.\n *\n * It supports all props of `DropzoneAreaBase` but keeps the files state internally.\n *\n * **Note** To listen to file changes use `onChange` event handler and notice that `onDelete` returns a `File` instance instead of `FileObject`.\n */\n\n\nvar DropzoneArea = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DropzoneArea, _React$PureComponent);\n\n  function DropzoneArea() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DropzoneArea);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropzoneArea)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fileObjects: []\n    };\n\n    _this.notifyFileChange = function () {\n      var onChange = _this.props.onChange;\n      var fileObjects = _this.state.fileObjects;\n\n      if (onChange) {\n        onChange(fileObjects.map(function (fileObject) {\n          return fileObject.file;\n        }));\n      }\n    };\n\n    _this.loadInitialFiles = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var initialFiles, fileObjs;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              initialFiles = _this.props.initialFiles;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return Promise.all(initialFiles.map( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(initialFile) {\n                  var file, data;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          if (!(typeof initialFile === 'string')) {\n                            _context.next = 6;\n                            break;\n                          }\n\n                          _context.next = 3;\n                          return createFileFromUrl(initialFile);\n\n                        case 3:\n                          file = _context.sent;\n                          _context.next = 7;\n                          break;\n\n                        case 6:\n                          file = initialFile;\n\n                        case 7:\n                          _context.next = 9;\n                          return readFile(file);\n\n                        case 9:\n                          data = _context.sent;\n                          return _context.abrupt(\"return\", {\n                            file: file,\n                            data: data\n                          });\n\n                        case 11:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()));\n\n            case 4:\n              fileObjs = _context2.sent;\n\n              _this.setState(function (state) {\n                return {\n                  fileObjects: [].concat(state.fileObjects, fileObjs)\n                };\n              }, _this.notifyFileChange);\n\n              _context2.next = 11;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(_context2.t0);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 8]]);\n    }));\n\n    _this.addFiles = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(newFileObjects) {\n        var filesLimit;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                filesLimit = _this.props.filesLimit; // Update component state\n\n                _this.setState(function (state) {\n                  // Handle a single file\n                  if (filesLimit <= 1) {\n                    return {\n                      fileObjects: [].concat(newFileObjects[0])\n                    };\n                  } // Handle multiple files\n\n\n                  return {\n                    fileObjects: [].concat(state.fileObjects, newFileObjects)\n                  };\n                }, _this.notifyFileChange);\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.deleteFile = function (removedFileObj, removedFileObjIdx) {\n      event.stopPropagation();\n      var onDelete = _this.props.onDelete;\n      var fileObjects = _this.state.fileObjects; // Calculate remaining fileObjects array\n\n      var remainingFileObjs = fileObjects.filter(function (fileObject, i) {\n        return i !== removedFileObjIdx;\n      }); // Notify removed file\n\n      if (onDelete) {\n        onDelete(removedFileObj.file);\n      } // Update local state\n\n\n      _this.setState({\n        fileObjects: remainingFileObjs\n      }, _this.notifyFileChange);\n    };\n\n    return _this;\n  }\n\n  _createClass(DropzoneArea, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadInitialFiles();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var clearOnUnmount = this.props.clearOnUnmount;\n\n      if (clearOnUnmount) {\n        this.setState({\n          fileObjects: []\n        }, this.notifyFileChange);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _splitDropzoneAreaPro = splitDropzoneAreaProps(this.props),\n          _splitDropzoneAreaPro2 = _slicedToArray(_splitDropzoneAreaPro, 2),\n          dropzoneAreaProps = _splitDropzoneAreaPro2[1];\n\n      var fileObjects = this.state.fileObjects;\n      return createElement(DropzoneAreaBase$1, _extends({}, dropzoneAreaProps, {\n        fileObjects: fileObjects,\n        onAdd: this.addFiles,\n        onDelete: this.deleteFile\n      }));\n    }\n  }]);\n\n  return DropzoneArea;\n}(PureComponent);\n\nDropzoneArea.defaultProps = {\n  clearOnUnmount: true,\n  filesLimit: 3,\n  initialFiles: []\n};\nprocess.env.NODE_ENV !== \"production\" ? DropzoneArea.propTypes = _extends({}, DropzoneAreaBase$1.propTypes, {\n  /** Clear uploaded files when component is unmounted. */\n  clearOnUnmount: PropTypes.bool,\n\n  /** List containing File objects or URL strings.<br/>\n   * **Note:** Please take care of CORS.\n  */\n  initialFiles: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.any])),\n\n  /** Maximum number of files that can be loaded into the dropzone. */\n  filesLimit: PropTypes.number,\n\n  /**\n   * Fired when the files inside dropzone change.\n   *\n   * @param {File[]} loadedFiles All the files currently loaded into the dropzone.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Fired when a file is deleted from the previews panel.\n   *\n   * @param {File} deletedFile The file that was removed.\n   */\n  onDelete: PropTypes.func\n}) : void 0;\n\nfunction splitDropzoneDialogProps(allProps) {\n  var cancelButtonText = allProps.cancelButtonText,\n      dialogProps = allProps.dialogProps,\n      dialogTitle = allProps.dialogTitle,\n      fullWidth = allProps.fullWidth,\n      maxWidth = allProps.maxWidth,\n      onClose = allProps.onClose,\n      onSave = allProps.onSave,\n      open = allProps.open,\n      submitButtonText = allProps.submitButtonText,\n      dropzoneAreaProps = _objectWithoutProperties(allProps, [\"cancelButtonText\", \"dialogProps\", \"dialogTitle\", \"fullWidth\", \"maxWidth\", \"onClose\", \"onSave\", \"open\", \"submitButtonText\"]);\n\n  return [{\n    cancelButtonText: cancelButtonText,\n    dialogProps: dialogProps,\n    dialogTitle: dialogTitle,\n    fullWidth: fullWidth,\n    maxWidth: maxWidth,\n    onClose: onClose,\n    onSave: onSave,\n    open: open,\n    submitButtonText: submitButtonText\n  }, dropzoneAreaProps];\n}\n/**\n * This component provides the DropzoneArea inside of a Material-UI Dialog.\n *\n * It supports all the Props and Methods from `DropzoneAreaBase`.\n */\n\n\nvar DropzoneDialogBase = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DropzoneDialogBase, _React$PureComponent);\n\n  function DropzoneDialogBase() {\n    _classCallCheck(this, DropzoneDialogBase);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DropzoneDialogBase).apply(this, arguments));\n  }\n\n  _createClass(DropzoneDialogBase, [{\n    key: \"render\",\n    value: function render() {\n      var _splitDropzoneDialogP = splitDropzoneDialogProps(this.props),\n          _splitDropzoneDialogP2 = _slicedToArray(_splitDropzoneDialogP, 2),\n          dropzoneDialogProps = _splitDropzoneDialogP2[0],\n          dropzoneAreaProps = _splitDropzoneDialogP2[1];\n\n      var cancelButtonText = dropzoneDialogProps.cancelButtonText,\n          dialogProps = dropzoneDialogProps.dialogProps,\n          dialogTitle = dropzoneDialogProps.dialogTitle,\n          fullWidth = dropzoneDialogProps.fullWidth,\n          maxWidth = dropzoneDialogProps.maxWidth,\n          onClose = dropzoneDialogProps.onClose,\n          onSave = dropzoneDialogProps.onSave,\n          open = dropzoneDialogProps.open,\n          submitButtonText = dropzoneDialogProps.submitButtonText; // Submit button state\n\n      var submitDisabled = dropzoneAreaProps.fileObjects.length === 0;\n      return createElement(Dialog, _extends({}, dialogProps, {\n        fullWidth: fullWidth,\n        maxWidth: maxWidth,\n        onClose: onClose,\n        open: open\n      }), createElement(DialogTitle, null, dialogTitle), createElement(DialogContent, null, createElement(DropzoneAreaBase$1, dropzoneAreaProps)), createElement(DialogActions, null, createElement(Button, {\n        color: \"primary\",\n        onClick: onClose\n      }, cancelButtonText), createElement(Button, {\n        color: \"primary\",\n        disabled: submitDisabled,\n        onClick: onSave\n      }, submitButtonText)));\n    }\n  }]);\n\n  return DropzoneDialogBase;\n}(PureComponent);\n\nDropzoneDialogBase.defaultProps = {\n  open: false,\n  dialogTitle: 'Upload file',\n  dialogProps: {},\n  fullWidth: true,\n  maxWidth: 'sm',\n  cancelButtonText: 'Cancel',\n  submitButtonText: 'Submit',\n  showPreviews: true,\n  showPreviewsInDropzone: false,\n  showFileNamesInPreview: true\n};\nprocess.env.NODE_ENV !== \"production\" ? DropzoneDialogBase.propTypes = _extends({}, DropzoneAreaBase$1.propTypes, {\n  /** Sets whether the dialog is open or closed. */\n  open: PropTypes.bool,\n\n  /** The Dialog title. */\n  dialogTitle: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Props to pass to the Material-UI Dialog components.\n   * @see See [Material-UI Dialog](https://material-ui.com/api/dialog/#props) for available values.\n   */\n  dialogProps: PropTypes.object,\n\n  /**\n   * If `true`, the dialog stretches to `maxWidth`.<br/>\n   * Notice that the dialog width grow is limited by the default margin.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * Determine the max-width of the dialog. The dialog width grows with the size of the screen.<br/>\n   * Set to `false` to disable `maxWidth`.\n   */\n  maxWidth: PropTypes.string,\n\n  /** Cancel button text in dialog. */\n  cancelButtonText: PropTypes.string,\n\n  /** Submit button text in dialog. */\n  submitButtonText: PropTypes.string,\n\n  /**\n   * Fired when the modal is closed.\n   *\n   * @param {SyntheticEvent} event The react `SyntheticEvent`\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Fired when the user clicks the Submit button.\n   *\n   * @param {SyntheticEvent} event The react `SyntheticEvent`\n   */\n  onSave: PropTypes.func,\n\n  /**\n   * Shows previews **BELOW** the dropzone.<br/>\n   * **Note:** By default previews show up under in the Dialog and inside in the standalone.\n   */\n  showPreviews: PropTypes.bool,\n\n  /** Shows preview **INSIDE** the dropzone area. */\n  showPreviewsInDropzone: PropTypes.bool,\n\n  /** Shows file name under the image. */\n  showFileNamesInPreview: PropTypes.bool\n}) : void 0;\n/**\n * This component provides an uncontrolled version of the DropzoneDialogBase component.\n *\n * It supports all the Props and Methods from `DropzoneDialogBase` but keeps the files state internally.\n *\n * **Note** The `onSave` handler also returns `File[]` with all the accepted files.\n */\n\nvar DropzoneDialog = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DropzoneDialog, _React$PureComponent);\n\n  function DropzoneDialog() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DropzoneDialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropzoneDialog)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fileObjects: []\n    };\n\n    _this.notifyFileChange = function () {\n      var onChange = _this.props.onChange;\n      var fileObjects = _this.state.fileObjects;\n\n      if (onChange) {\n        onChange(fileObjects.map(function (fileObject) {\n          return fileObject.file;\n        }));\n      }\n    };\n\n    _this.loadInitialFiles = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var initialFiles, fileObjs;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              initialFiles = _this.props.initialFiles;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return Promise.all(initialFiles.map( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(initialFile) {\n                  var file, data;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          if (!(typeof initialFile === 'string')) {\n                            _context.next = 6;\n                            break;\n                          }\n\n                          _context.next = 3;\n                          return createFileFromUrl(initialFile);\n\n                        case 3:\n                          file = _context.sent;\n                          _context.next = 7;\n                          break;\n\n                        case 6:\n                          file = initialFile;\n\n                        case 7:\n                          _context.next = 9;\n                          return readFile(file);\n\n                        case 9:\n                          data = _context.sent;\n                          return _context.abrupt(\"return\", {\n                            file: file,\n                            data: data\n                          });\n\n                        case 11:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()));\n\n            case 4:\n              fileObjs = _context2.sent;\n\n              _this.setState(function (state) {\n                return {\n                  fileObjects: [].concat(state.fileObjects, fileObjs)\n                };\n              }, _this.notifyFileChange);\n\n              _context2.next = 11;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(_context2.t0);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 8]]);\n    }));\n\n    _this.addFiles = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(newFileObjects) {\n        var filesLimit;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                filesLimit = _this.props.filesLimit; // Update component state\n\n                _this.setState(function (state) {\n                  // Handle a single file\n                  if (filesLimit <= 1) {\n                    return {\n                      fileObjects: [].concat(newFileObjects[0])\n                    };\n                  } // Handle multiple files\n\n\n                  return {\n                    fileObjects: [].concat(state.fileObjects, newFileObjects)\n                  };\n                }, _this.notifyFileChange);\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.deleteFile = function (removedFileObj, removedFileObjIdx) {\n      event.stopPropagation();\n      var onDelete = _this.props.onDelete;\n      var fileObjects = _this.state.fileObjects; // Calculate remaining fileObjects array\n\n      var remainingFileObjs = fileObjects.filter(function (fileObject, i) {\n        return i !== removedFileObjIdx;\n      }); // Notify removed file\n\n      if (onDelete) {\n        onDelete(removedFileObj.file);\n      } // Update local state\n\n\n      _this.setState({\n        fileObjects: remainingFileObjs\n      }, _this.notifyFileChange);\n    };\n\n    _this.handleClose = function (evt) {\n      var _this$props = _this.props,\n          clearOnUnmount = _this$props.clearOnUnmount,\n          onClose = _this$props.onClose;\n\n      if (onClose) {\n        onClose(evt);\n      }\n\n      if (clearOnUnmount) {\n        _this.setState({\n          fileObjects: []\n        }, _this.notifyFileChange);\n      }\n    };\n\n    _this.handleSave = function (evt) {\n      var _this$props2 = _this.props,\n          clearOnUnmount = _this$props2.clearOnUnmount,\n          onSave = _this$props2.onSave;\n      var fileObjects = _this.state.fileObjects;\n\n      if (onSave) {\n        onSave(fileObjects.map(function (fileObject) {\n          return fileObject.file;\n        }), evt);\n      }\n\n      if (clearOnUnmount) {\n        _this.setState({\n          fileObjects: []\n        }, _this.notifyFileChange);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(DropzoneDialog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadInitialFiles();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var clearOnUnmount = this.props.clearOnUnmount;\n\n      if (clearOnUnmount) {\n        this.setState({\n          fileObjects: []\n        }, this.notifyFileChange);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var fileObjects = this.state.fileObjects;\n      return createElement(DropzoneDialogBase, _extends({}, this.props, {\n        fileObjects: fileObjects,\n        onAdd: this.addFiles,\n        onDelete: this.deleteFile,\n        onClose: this.handleClose,\n        onSave: this.handleSave\n      }));\n    }\n  }]);\n\n  return DropzoneDialog;\n}(PureComponent);\n\nDropzoneDialog.defaultProps = {\n  clearOnUnmount: true,\n  filesLimit: 3,\n  initialFiles: []\n};\nprocess.env.NODE_ENV !== \"production\" ? DropzoneDialog.propTypes = _extends({}, DropzoneDialogBase.propTypes, {\n  /** Clear uploaded files when component is unmounted. */\n  clearOnUnmount: PropTypes.bool,\n\n  /** Maximum number of files that can be loaded into the dropzone. */\n  filesLimit: PropTypes.number,\n\n  /** List containing File objects or URL strings.<br/>\n   * **Note:** Please take care of CORS.\n  */\n  initialFiles: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.any])),\n\n  /**\n   * Fired when the user clicks the Submit button.\n   *\n   * @param {File[]} files All the files currently inside the Dropzone.\n   * @param {SyntheticEvent} event The react `SyntheticEvent`.\n   */\n  onSave: PropTypes.func\n}) : void 0;\nexport { DropzoneArea, DropzoneAreaBase$1 as DropzoneAreaBase, DropzoneDialog, DropzoneDialogBase };","map":{"version":3,"mappings":"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","names":["isImage","file","type","split","convertBytesToMbsOrKbs","filesize","size","createFileFromUrl","_x","url","_context","fetch","response","blob","data","metadata","filename","replace","pop","File","readFile","Promise","resolve","reject","reader","FileReader","onload","event","target","_event$target","result","onerror","abort","readAsDataURL","styles","palette","shape","spacing","root","imageContainer","position","zIndex","textAlign","opacity","image","height","width","maxWidth","color","text","primary","transition","boxSizing","boxShadow","borderRadius","removeButton","top","right","React.createElement","DeleteIcon","PreviewList","fileObjects","handleRemove","showFileNames","useChipsForPreview","previewChipProps","previewGridClasses","previewGridProps","classes","getPreviewIcon","Grid","direction","container","className","clsx","map","fileObject","i","item","key","_fileObject$file","name","Chip","variant","label","onDelete","xs","_fileObject$file2","Typography","component","Fab","onClick","process","propTypes","PropTypes","object","isRequired","arrayOf","func","bool","withStyles","variantIcon","success","CheckCircleIcon","warning","WarningIcon","error","ErrorIcon","info","InfoIcon","theme","successAlert","backgroundColor","main","errorAlert","infoAlert","warningAlert","message","display","alignItems","marginRight","icon","fontSize","closeButton","SnackbarContentWrapper","props","onClose","other","Icon","SnackbarContent","id","action","IconButton","CloseIcon","string","node","oneOf","backgroundPosition","minHeight","background","paper","border","borderColor","divider","cursor","overflow","active","animation","backgroundImage","backgroundSize","light","invalid","dark","textContainer","marginBottom","marginTop","defaultSnackbarAnchorOrigin","horizontal","vertical","defaultGetPreviewIcon","role","src","AttachFileIcon","DropzoneAreaBase","state","openSnackBar","snackbarMessage","snackbarVariant","handleDropAccepted","acceptedFiles","evt","_this$props","_this","filesLimit","getFileAddedMessage","getFileLimitExceedMessage","onAdd","onDrop","length","_context2","setState","notifyAlert","all","fileObjs","reduce","msg","fileObj","handleDropRejected","rejectedFiles","getDropRejectMessage","maxFileSize","onDropRejected","forEach","rejectedFile","fileIndex","stopPropagation","getFileRemovedMessage","removedFileObj","handleCloseSnackbar","onAlert","alertSnackbarProps","disableRejectionFeedback","dropzoneClass","dropzoneParagraphClass","dropzoneProps","dropzoneText","inputProps","previewText","showAlerts","showFileNamesInPreview","showPreviews","showPreviewsInDropzone","acceptFiles","join","isMultiple","previewsVisible","previewsInDropzoneVisible","Fragment","Dropzone","accept","onDropAccepted","maxSize","multiple","getRootProps","getInputProps","isDragActive","isDragReject","CloudUploadIcon","_this2","Array","isArray","includes","Snackbar","anchorOrigin","autoHideDuration","open","React","defaultProps","fileName","FileObjectShape","any","number","elementType","oneOfType","splitDropzoneAreaProps","clearOnUnmount","initialFiles","onChange","dropzoneAreaProps","DropzoneArea","notifyFileChange","loadInitialFiles","initialFile","concat","console","log","addFiles","newFileObjects","deleteFile","removedFileObjIdx","remainingFileObjs","filter","splitDropzoneDialogProps","allProps","cancelButtonText","dialogProps","dialogTitle","fullWidth","onSave","submitButtonText","DropzoneDialogBase","dropzoneDialogProps","submitDisabled","Dialog","DialogTitle","DialogContent","DialogActions","Button","disabled","element","DropzoneDialog","handleClose","handleSave"],"sources":["C:\\Users\\ayush\\Downloads\\Tomato-Leaf-Disease-Classification-Using-CNN-main\\Tomato-Leaf-Disease-Classification-Using-CNN-main\\UI\\node_modules\\material-ui-dropzone\\src\\helpers.js","C:\\Users\\ayush\\Downloads\\Tomato-Leaf-Disease-Classification-Using-CNN-main\\Tomato-Leaf-Disease-Classification-Using-CNN-main\\UI\\node_modules\\material-ui-dropzone\\src\\components\\PreviewList.js","C:\\Users\\ayush\\Downloads\\Tomato-Leaf-Disease-Classification-Using-CNN-main\\Tomato-Leaf-Disease-Classification-Using-CNN-main\\UI\\node_modules\\material-ui-dropzone\\src\\components\\SnackbarContentWrapper.js","C:\\Users\\ayush\\Downloads\\Tomato-Leaf-Disease-Classification-Using-CNN-main\\Tomato-Leaf-Disease-Classification-Using-CNN-main\\UI\\node_modules\\material-ui-dropzone\\src\\components\\DropzoneAreaBase.js","C:\\Users\\ayush\\Downloads\\Tomato-Leaf-Disease-Classification-Using-CNN-main\\Tomato-Leaf-Disease-Classification-Using-CNN-main\\UI\\node_modules\\material-ui-dropzone\\src\\components\\DropzoneArea.js","C:\\Users\\ayush\\Downloads\\Tomato-Leaf-Disease-Classification-Using-CNN-main\\Tomato-Leaf-Disease-Classification-Using-CNN-main\\UI\\node_modules\\material-ui-dropzone\\src\\components\\DropzoneDialogBase.js","C:\\Users\\ayush\\Downloads\\Tomato-Leaf-Disease-Classification-Using-CNN-main\\Tomato-Leaf-Disease-Classification-Using-CNN-main\\UI\\node_modules\\material-ui-dropzone\\src\\components\\DropzoneDialog.js"],"sourcesContent":["export function isImage(file) {\n    if (file.type.split('/')[0] === 'image') {\n        return true;\n    }\n}\n\nexport function convertBytesToMbsOrKbs(filesize) {\n    let size = '';\n    if (filesize >= 1048576) {\n        size = (filesize / 1048576) + ' megabytes';\n    } else if (filesize >= 1024) {\n        size = (filesize / 1024) + ' kilobytes';\n    } else {\n        size = filesize + ' bytes';\n    }\n    return size;\n}\n\nexport async function createFileFromUrl(url) {\n    const response = await fetch(url);\n    const data = await response.blob();\n    const metadata = {type: data.type};\n    const filename = url.replace(/\\?.+/, '').split('/').pop();\n    return new File([data], filename, metadata);\n}\n\nexport function readFile(file) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n            resolve(event?.target?.result);\n        };\n        reader.onerror = (event) => {\n            reader.abort();\n            reject(event);\n        };\n        reader.readAsDataURL(file);\n    });\n}\n","import Chip from '@material-ui/core/Chip';\nimport Fab from '@material-ui/core/Fab';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {withStyles} from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport clsx from 'clsx';\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\n\nconst styles = ({palette, shape, spacing}) => ({\n    root: {},\n    imageContainer: {\n        position: 'relative',\n        zIndex: 10,\n        textAlign: 'center',\n        '&:hover $image': {\n            opacity: 0.3,\n        },\n        '&:hover $removeButton': {\n            opacity: 1,\n        },\n    },\n    image: {\n        height: 100,\n        width: 'initial',\n        maxWidth: '100%',\n        color: palette.text.primary,\n        transition: 'all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms',\n        boxSizing: 'border-box',\n        boxShadow: 'rgba(0, 0, 0, 0.12) 0 1px 6px, rgba(0, 0, 0, 0.12) 0 1px 4px',\n        borderRadius: shape.borderRadius,\n        zIndex: 5,\n        opacity: 1,\n    },\n    removeButton: {\n        transition: '.5s ease',\n        position: 'absolute',\n        opacity: 0,\n        top: spacing(-1),\n        right: spacing(-1),\n        width: 40,\n        height: 40,\n        '&:focus': {\n            opacity: 1,\n        },\n    },\n});\n\nfunction PreviewList({\n    fileObjects,\n    handleRemove,\n    showFileNames,\n    useChipsForPreview,\n    previewChipProps,\n    previewGridClasses,\n    previewGridProps,\n    classes,\n    getPreviewIcon,\n}) {\n    if (useChipsForPreview) {\n        return (\n            <Grid\n                spacing={1}\n                direction=\"row\"\n                {...previewGridProps.container}\n                container={true}\n                className={clsx(classes.root, previewGridClasses.container)}\n            >\n                {fileObjects.map((fileObject, i) => {\n                    return (\n                        <Grid\n                            {...previewGridProps.item}\n                            item={true}\n                            key={`${fileObject.file?.name ?? 'file'}-${i}`}\n                            className={classes.imageContainer}\n                        >\n                            <Chip\n                                variant=\"outlined\"\n                                {...previewChipProps}\n                                label={fileObject.file.name}\n                                onDelete={handleRemove(i)}\n                            />\n                        </Grid>\n                    );\n                })}\n            </Grid>\n        );\n    }\n\n    return (\n        <Grid\n            spacing={8}\n            {...previewGridProps.container}\n            container={true}\n            className={clsx(classes.root, previewGridClasses.container)}\n        >\n            {fileObjects.map((fileObject, i) => {\n                return (\n                    <Grid\n                        xs={4}\n                        {...previewGridProps.item}\n                        item={true}\n                        key={`${fileObject.file?.name ?? 'file'}-${i}`}\n                        className={clsx(classes.imageContainer, previewGridClasses.item)}\n                    >\n                        {getPreviewIcon(fileObject, classes)}\n\n                        {showFileNames && (\n                            <Typography variant=\"body1\" component=\"p\">\n                                {fileObject.file.name}\n                            </Typography>\n                        )}\n\n                        <Fab\n                            onClick={handleRemove(i)}\n                            aria-label=\"Delete\"\n                            className={classes.removeButton}\n                        >\n                            <DeleteIcon />\n                        </Fab>\n                    </Grid>\n                );\n            })}\n        </Grid>\n    );\n}\n\nPreviewList.propTypes = {\n    classes: PropTypes.object.isRequired,\n    fileObjects: PropTypes.arrayOf(PropTypes.object).isRequired,\n    getPreviewIcon: PropTypes.func.isRequired,\n    handleRemove: PropTypes.func.isRequired,\n    previewChipProps: PropTypes.object,\n    previewGridClasses: PropTypes.object,\n    previewGridProps: PropTypes.object,\n    showFileNames: PropTypes.bool,\n    useChipsForPreview: PropTypes.bool,\n};\n\nexport default withStyles(styles, {name: 'MuiDropzonePreviewList'})(PreviewList);\n","import IconButton from '@material-ui/core/IconButton';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport {withStyles} from '@material-ui/core/styles';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n};\n\nconst styles = (theme) => ({\n    successAlert: {\n        backgroundColor: theme.palette.success.main,\n    },\n    errorAlert: {\n        backgroundColor: theme.palette.error.main,\n    },\n    infoAlert: {\n        backgroundColor: theme.palette.info.main,\n    },\n    warningAlert: {\n        backgroundColor: theme.palette.warning.main,\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'center',\n        '& > svg': {\n            marginRight: theme.spacing(1),\n        },\n    },\n    icon: {\n        fontSize: 20,\n        opacity: 0.9,\n    },\n    closeButton: {},\n});\n\nfunction SnackbarContentWrapper(props) {\n    const {classes, className, message, onClose, variant, ...other} = props;\n    const Icon = variantIcon[variant];\n\n    return (\n        <SnackbarContent\n            className={clsx(classes[`${variant}Alert`], className)}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\" className={classes.message}>\n                    <Icon className={classes.icon} />\n                    {message}\n                </span>\n            }\n            action={[\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"Close\"\n                    color=\"inherit\"\n                    className={classes.closeButton}\n                    onClick={onClose}\n                >\n                    <CloseIcon className={classes.icon} />\n                </IconButton>,\n            ]}\n            {...other}\n        />\n    );\n}\n\nSnackbarContentWrapper.propTypes = {\n    classes: PropTypes.object.isRequired,\n    className: PropTypes.string,\n    message: PropTypes.node,\n    onClose: PropTypes.func,\n    variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\n};\n\nexport default withStyles(styles, {name: 'MuiDropzoneSnackbar'})(SnackbarContentWrapper);\n","import Snackbar from '@material-ui/core/Snackbar';\nimport Typography from '@material-ui/core/Typography';\nimport {withStyles} from '@material-ui/core/styles';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {Fragment} from 'react';\nimport Dropzone from 'react-dropzone';\nimport {convertBytesToMbsOrKbs, isImage, readFile} from '../helpers';\nimport PreviewList from './PreviewList';\nimport SnackbarContentWrapper from './SnackbarContentWrapper';\n\nconst styles = ({palette, shape, spacing}) => ({\n    '@keyframes progress': {\n        '0%': {\n            backgroundPosition: '0 0',\n        },\n        '100%': {\n            backgroundPosition: '-70px 0',\n        },\n    },\n    root: {\n        position: 'relative',\n        width: '100%',\n        minHeight: '250px',\n        backgroundColor: palette.background.paper,\n        border: 'dashed',\n        borderColor: palette.divider,\n        borderRadius: shape.borderRadius,\n        boxSizing: 'border-box',\n        cursor: 'pointer',\n        overflow: 'hidden',\n    },\n    active: {\n        animation: '$progress 2s linear infinite !important',\n        // eslint-disable-next-line max-len\n        backgroundImage: `repeating-linear-gradient(-45deg, ${palette.background.paper}, ${palette.background.paper} 25px, ${palette.divider} 25px, ${palette.divider} 50px)`,\n        backgroundSize: '150% 100%',\n        border: 'solid',\n        borderColor: palette.primary.light,\n    },\n    invalid: {\n        // eslint-disable-next-line max-len\n        backgroundImage: `repeating-linear-gradient(-45deg, ${palette.error.light}, ${palette.error.light} 25px, ${palette.error.dark} 25px, ${palette.error.dark} 50px)`,\n        borderColor: palette.error.main,\n    },\n    textContainer: {\n        textAlign: 'center',\n    },\n    text: {\n        marginBottom: spacing(3),\n        marginTop: spacing(3),\n    },\n    icon: {\n        width: 51,\n        height: 51,\n        color: palette.text.primary,\n    },\n});\n\nconst defaultSnackbarAnchorOrigin = {\n    horizontal: 'left',\n    vertical: 'bottom',\n};\n\nconst defaultGetPreviewIcon = (fileObject, classes) => {\n    if (isImage(fileObject.file)) {\n        return (<img\n            className={classes.image}\n            role=\"presentation\"\n            src={fileObject.data}\n        />);\n    }\n\n    return <AttachFileIcon className={classes.image} />;\n};\n\n/**\n * This components creates a Material-UI Dropzone, with previews and snackbar notifications.\n */\nclass DropzoneAreaBase extends React.PureComponent {\n    state = {\n        openSnackBar: false,\n        snackbarMessage: '',\n        snackbarVariant: 'success',\n    };\n\n    notifyAlert() {\n        const {onAlert} = this.props;\n        const {openSnackBar, snackbarMessage, snackbarVariant} = this.state;\n        if (openSnackBar && onAlert) {\n            onAlert(snackbarMessage, snackbarVariant);\n        }\n    }\n\n    handleDropAccepted = async(acceptedFiles, evt) => {\n        const {fileObjects, filesLimit, getFileAddedMessage, getFileLimitExceedMessage, onAdd, onDrop} = this.props;\n\n        if (filesLimit > 1 && fileObjects.length + acceptedFiles.length > filesLimit) {\n            this.setState({\n                openSnackBar: true,\n                snackbarMessage: getFileLimitExceedMessage(filesLimit),\n                snackbarVariant: 'error',\n            }, this.notifyAlert);\n            return;\n        }\n\n        // Notify Drop event\n        if (onDrop) {\n            onDrop(acceptedFiles, evt);\n        }\n\n        // Retrieve fileObjects data\n        const fileObjs = await Promise.all(\n            acceptedFiles.map(async(file) => {\n                const data = await readFile(file);\n                return {\n                    file,\n                    data,\n                };\n            })\n        );\n\n        // Notify added files\n        if (onAdd) {\n            onAdd(fileObjs);\n        }\n\n        // Display message\n        const message = fileObjs.reduce((msg, fileObj) => msg + getFileAddedMessage(fileObj.file.name), '');\n        this.setState({\n            openSnackBar: true,\n            snackbarMessage: message,\n            snackbarVariant: 'success',\n        }, this.notifyAlert);\n    }\n\n    handleDropRejected = (rejectedFiles, evt) => {\n        const {\n            acceptedFiles,\n            filesLimit,\n            fileObjects,\n            getDropRejectMessage,\n            getFileLimitExceedMessage,\n            maxFileSize,\n            onDropRejected,\n        } = this.props;\n\n        let message = '';\n        if (fileObjects.length + rejectedFiles.length > filesLimit) {\n            message = getFileLimitExceedMessage(filesLimit);\n        } else {\n            rejectedFiles.forEach((rejectedFile) => {\n                message = getDropRejectMessage(rejectedFile, acceptedFiles, maxFileSize);\n            });\n        }\n\n        if (onDropRejected) {\n            onDropRejected(rejectedFiles, evt);\n        }\n\n        this.setState({\n            openSnackBar: true,\n            snackbarMessage: message,\n            snackbarVariant: 'error',\n        }, this.notifyAlert);\n    }\n\n    handleRemove = (fileIndex) => (event) => {\n        event.stopPropagation();\n\n        const {fileObjects, getFileRemovedMessage, onDelete} = this.props;\n\n        // Find removed fileObject\n        const removedFileObj = fileObjects[fileIndex];\n\n        // Notify removed file\n        if (onDelete) {\n            onDelete(removedFileObj, fileIndex);\n        }\n\n        this.setState({\n            openSnackBar: true,\n            snackbarMessage: getFileRemovedMessage(removedFileObj.file.name),\n            snackbarVariant: 'info',\n        }, this.notifyAlert);\n    };\n\n    handleCloseSnackbar = () => {\n        this.setState({\n            openSnackBar: false,\n        });\n    };\n\n    render() {\n        const {\n            acceptedFiles,\n            alertSnackbarProps,\n            classes,\n            disableRejectionFeedback,\n            dropzoneClass,\n            dropzoneParagraphClass,\n            dropzoneProps,\n            dropzoneText,\n            fileObjects,\n            filesLimit,\n            getPreviewIcon,\n            Icon,\n            inputProps,\n            maxFileSize,\n            previewChipProps,\n            previewGridClasses,\n            previewGridProps,\n            previewText,\n            showAlerts,\n            showFileNames,\n            showFileNamesInPreview,\n            showPreviews,\n            showPreviewsInDropzone,\n            useChipsForPreview,\n        } = this.props;\n        const {openSnackBar, snackbarMessage, snackbarVariant} = this.state;\n\n        const acceptFiles = acceptedFiles?.join(',');\n        const isMultiple = filesLimit > 1;\n        const previewsVisible = showPreviews && fileObjects.length > 0;\n        const previewsInDropzoneVisible = showPreviewsInDropzone && fileObjects.length > 0;\n\n        return (\n            <Fragment>\n                <Dropzone\n                    {...dropzoneProps}\n                    accept={acceptFiles}\n                    onDropAccepted={this.handleDropAccepted}\n                    onDropRejected={this.handleDropRejected}\n                    maxSize={maxFileSize}\n                    multiple={isMultiple}\n                >\n                    {({getRootProps, getInputProps, isDragActive, isDragReject}) => (\n                        <div\n                            {...getRootProps({\n                                className: clsx(\n                                    classes.root,\n                                    dropzoneClass,\n                                    isDragActive && classes.active,\n                                    (!disableRejectionFeedback && isDragReject) && classes.invalid,\n                                ),\n                            })}\n                        >\n                            <input {...getInputProps(inputProps)} />\n\n                            <div className={classes.textContainer}>\n                                <Typography\n                                    variant=\"h5\"\n                                    component=\"p\"\n                                    className={clsx(classes.text, dropzoneParagraphClass)}\n                                >\n                                    {dropzoneText}\n                                </Typography>\n                                {Icon ? (\n                                    <Icon className={classes.icon} />\n                                ) : (\n                                    <CloudUploadIcon className={classes.icon} />\n                                )}\n                            </div>\n\n                            {previewsInDropzoneVisible &&\n                                <PreviewList\n                                    fileObjects={fileObjects}\n                                    handleRemove={this.handleRemove}\n                                    getPreviewIcon={getPreviewIcon}\n                                    showFileNames={showFileNames}\n                                    useChipsForPreview={useChipsForPreview}\n                                    previewChipProps={previewChipProps}\n                                    previewGridClasses={previewGridClasses}\n                                    previewGridProps={previewGridProps}\n                                />\n                            }\n                        </div>\n                    )}\n                </Dropzone>\n\n                {previewsVisible &&\n                    <Fragment>\n                        <Typography variant=\"subtitle1\" component=\"span\">\n                            {previewText}\n                        </Typography>\n\n                        <PreviewList\n                            fileObjects={fileObjects}\n                            handleRemove={this.handleRemove}\n                            getPreviewIcon={getPreviewIcon}\n                            showFileNames={showFileNamesInPreview}\n                            useChipsForPreview={useChipsForPreview}\n                            previewChipProps={previewChipProps}\n                            previewGridClasses={previewGridClasses}\n                            previewGridProps={previewGridProps}\n                        />\n                    </Fragment>\n                }\n\n                {((typeof showAlerts === 'boolean' && showAlerts) ||\n                    (Array.isArray(showAlerts) && showAlerts.includes(snackbarVariant))) &&\n                    <Snackbar\n                        anchorOrigin={defaultSnackbarAnchorOrigin}\n                        autoHideDuration={6000}\n                        {...alertSnackbarProps}\n                        open={openSnackBar}\n                        onClose={this.handleCloseSnackbar}\n                    >\n                        <SnackbarContentWrapper\n                            onClose={this.handleCloseSnackbar}\n                            variant={snackbarVariant}\n                            message={snackbarMessage}\n                        />\n                    </Snackbar>\n                }\n            </Fragment>\n        );\n    }\n}\n\nDropzoneAreaBase.defaultProps = {\n    acceptedFiles: [],\n    filesLimit: 3,\n    fileObjects: [],\n    maxFileSize: 3000000,\n    dropzoneText: 'Drag and drop a file here or click',\n    previewText: 'Preview:',\n    disableRejectionFeedback: false,\n    showPreviews: false, // By default previews show up under in the dialog and inside in the standalone\n    showPreviewsInDropzone: true,\n    showFileNames: false,\n    showFileNamesInPreview: false,\n    useChipsForPreview: false,\n    previewChipProps: {},\n    previewGridClasses: {},\n    previewGridProps: {},\n    showAlerts: true,\n    alertSnackbarProps: {\n        anchorOrigin: {\n            horizontal: 'left',\n            vertical: 'bottom',\n        },\n        autoHideDuration: 6000,\n    },\n    getFileLimitExceedMessage: (filesLimit) => (`Maximum allowed number of files exceeded. Only ${filesLimit} allowed`),\n    getFileAddedMessage: (fileName) => (`File ${fileName} successfully added.`),\n    getPreviewIcon: defaultGetPreviewIcon,\n    getFileRemovedMessage: (fileName) => (`File ${fileName} removed.`),\n    getDropRejectMessage: (rejectedFile, acceptedFiles, maxFileSize) => {\n        let message = `File ${rejectedFile.name} was rejected. `;\n        if (!acceptedFiles.includes(rejectedFile.type)) {\n            message += 'File type not supported. ';\n        }\n        if (rejectedFile.size > maxFileSize) {\n            message += 'File is too big. Size limit is ' + convertBytesToMbsOrKbs(maxFileSize) + '. ';\n        }\n        return message;\n    },\n};\n\nexport const FileObjectShape = PropTypes.shape({\n    file: PropTypes.object,\n    data: PropTypes.any,\n});\n\nDropzoneAreaBase.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** A list of file types to accept.\n     * @see See [here](https://react-dropzone.js.org/#section-accepting-specific-file-types) for more details.\n     */\n    acceptedFiles: PropTypes.arrayOf(PropTypes.string),\n    /** Maximum number of files that can be loaded into the dropzone. */\n    filesLimit: PropTypes.number,\n    /** Icon to be displayed inside the dropzone area. */\n    Icon: PropTypes.elementType,\n    /** Currently loaded files. */\n    fileObjects: PropTypes.arrayOf(FileObjectShape),\n    /** Maximum file size (in bytes) that the dropzone will accept. */\n    maxFileSize: PropTypes.number,\n    /** Text inside the dropzone. */\n    dropzoneText: PropTypes.string,\n    /** Custom CSS class name for dropzone container. */\n    dropzoneClass: PropTypes.string,\n    /** Custom CSS class name for text inside the container. */\n    dropzoneParagraphClass: PropTypes.string,\n    /** Disable feedback effect when dropping rejected files. */\n    disableRejectionFeedback: PropTypes.bool,\n    /** Shows previews **BELOW** the dropzone. */\n    showPreviews: PropTypes.bool,\n    /** Shows preview **INSIDE** the dropzone area. */\n    showPreviewsInDropzone: PropTypes.bool,\n    /** Shows file name under the dropzone image. */\n    showFileNames: PropTypes.bool,\n    /** Shows file name under the image. */\n    showFileNamesInPreview: PropTypes.bool,\n    /** Uses deletable Material-UI Chip components to display file names. */\n    useChipsForPreview: PropTypes.bool,\n    /**\n     * Props to pass to the Material-UI Chip components.<br/>Requires `useChipsForPreview` prop to be `true`.\n     *\n     * @see See [Material-UI Chip](https://material-ui.com/api/chip/#props) for available values.\n     */\n    previewChipProps: PropTypes.object,\n    /**\n     * Custom CSS classNames for preview Grid components.<br/>\n     * Should be in the form {container: string, item: string, image: string}.\n     */\n    previewGridClasses: PropTypes.object,\n    /**\n     * Props to pass to the Material-UI Grid components.<br/>\n     * Should be in the form {container: GridProps, item: GridProps}.\n     *\n     * @see See [Material-UI Grid](https://material-ui.com/api/grid/#props) for available GridProps values.\n     */\n    previewGridProps: PropTypes.object,\n    /** The label for the file preview section. */\n    previewText: PropTypes.string,\n    /**\n     * Shows styled Material-UI Snackbar when files are dropped, deleted or rejected.\n     *\n     * - can be a boolean (\"global\" `true` or `false` for all alerts).\n     * - can be an array, with values 'error', 'info', 'success' to select to view only certain alerts:\n     *  - showAlerts={['error']} for only errors.\n     *  - showAlerts={['error', 'info']} for both errors and info.\n     *  - showAlerts={['error', 'success', 'info']} is same as showAlerts={true}.\n     *  - showAlerts={[]} is same as showAlerts={false}.\n     */\n    showAlerts: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.arrayOf(PropTypes.oneOf(['error', 'success', 'info'])),\n    ]),\n    /**\n     * Props to pass to the Material-UI Snackbar components.<br/>Requires `showAlerts` prop to be `true`.\n     *\n     * @see See [Material-UI Snackbar](https://material-ui.com/api/snackbar/#props) for available values.\n     */\n    alertSnackbarProps: PropTypes.object,\n    /**\n     * Props to pass to the Dropzone component.\n     *\n     * @see See [Dropzone props](https://react-dropzone.js.org/#src) for available values.\n     */\n    dropzoneProps: PropTypes.object,\n    /**\n     * Attributes applied to the input element.\n     *\n     * @see See [MDN Input File attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Additional_attributes) for available values.\n     */\n    inputProps: PropTypes.object,\n    /**\n     * Get alert message to display when files limit is exceed.\n     *\n     * *Default*: \"Maximum allowed number of files exceeded. Only ${filesLimit} allowed\"\n     *\n     * @param {number} filesLimit The `filesLimit` currently set for the component.\n     */\n    getFileLimitExceedMessage: PropTypes.func,\n    /**\n     * Get alert message to display when a new file is added.\n     *\n     * *Default*: \"File ${fileName} successfully added.\"\n     *\n     * @param {string} fileName The newly added file name.\n     */\n    getFileAddedMessage: PropTypes.func,\n    /**\n     * Get alert message to display when a file is removed.\n     *\n     * *Default*: \"File ${fileName} removed.\"\n     *\n     * @param {string} fileName The name of the removed file.\n     */\n    getFileRemovedMessage: PropTypes.func,\n    /**\n     * Get alert message to display when a file is rejected onDrop.\n     *\n     * *Default*: \"File ${rejectedFile.name} was rejected.\"\n     *\n     * @param {Object} rejectedFile The file that got rejected\n     * @param {string[]} acceptedFiles The `acceptedFiles` prop currently set for the component\n     * @param {number} maxFileSize The `maxFileSize` prop currently set for the component\n     */\n    getDropRejectMessage: PropTypes.func,\n    /**\n     * A function which determines which icon to display for a file preview.\n     *\n     * *Default*: If its an image then displays a preview the image, otherwise it will display an attachment icon\n     *\n     * @param {FileObject} objectFile The file which the preview will belong to\n     * @param {Object} classes The classes for the file preview icon, in the default case we use the 'image' className.\n     */\n    getPreviewIcon: PropTypes.func,\n    /**\n     * Fired when new files are added to dropzone.\n     *\n     * @param {FileObject[]} newFiles The new files added to the dropzone.\n     */\n    onAdd: PropTypes.func,\n    /**\n     * Fired when a file is deleted from the previews panel.\n     *\n     * @param {FileObject} deletedFileObject The file that was removed.\n     * @param {number} index The index of the removed file object.\n     */\n    onDelete: PropTypes.func,\n    /**\n     * Fired when the user drops files into the dropzone.\n     *\n     * @param {File[]} droppedFiles All the files dropped into the dropzone.\n     * @param {Event} event The react-dropzone drop event.\n     */\n    onDrop: PropTypes.func,\n    /**\n     * Fired when a file is rejected because of wrong file type, size or goes beyond the filesLimit.\n     *\n     * @param {File[]} rejectedFiles All the rejected files.\n     * @param {Event} event The react-dropzone drop event.\n     */\n    onDropRejected: PropTypes.func,\n    /**\n     * Fired when an alert is triggered.\n     *\n     * @param {string} message Alert message.\n     * @param {string} variant One of \"error\", \"info\", \"success\".\n     */\n    onAlert: PropTypes.func,\n};\n\nexport default withStyles(styles, {name: 'MuiDropzoneArea'})(DropzoneAreaBase);\n","import PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {createFileFromUrl, readFile} from '../helpers';\n\nimport DropzoneAreaBase from './DropzoneAreaBase';\n\nconst splitDropzoneAreaProps = (props) => {\n    const {clearOnUnmount, initialFiles, onChange, onDelete, ...dropzoneAreaProps} = props;\n    return [{clearOnUnmount, initialFiles, onChange, onDelete}, dropzoneAreaProps];\n};\n\n/**\n * This components creates an uncontrolled Material-UI Dropzone, with previews and snackbar notifications.\n *\n * It supports all props of `DropzoneAreaBase` but keeps the files state internally.\n *\n * **Note** To listen to file changes use `onChange` event handler and notice that `onDelete` returns a `File` instance instead of `FileObject`.\n */\nclass DropzoneArea extends React.PureComponent {\n    state = {\n        fileObjects: [],\n    }\n\n    componentDidMount() {\n        this.loadInitialFiles();\n    }\n\n    componentWillUnmount() {\n        const {clearOnUnmount} = this.props;\n\n        if (clearOnUnmount) {\n            this.setState({\n                fileObjects: [],\n            }, this.notifyFileChange);\n        }\n    }\n\n    notifyFileChange = () => {\n        const {onChange} = this.props;\n        const {fileObjects} = this.state;\n\n        if (onChange) {\n            onChange(fileObjects.map((fileObject) => fileObject.file));\n        }\n    }\n\n    loadInitialFiles = async() => {\n        const {initialFiles} = this.props;\n        try {\n            const fileObjs = await Promise.all(\n                initialFiles.map(async(initialFile) => {\n                    let file;\n                    if (typeof initialFile === 'string' ) {\n                        file = await createFileFromUrl(initialFile);\n                    } else {\n                        file = initialFile;\n                    }\n                    const data = await readFile(file);\n\n                    return {\n                        file,\n                        data,\n                    };\n                })\n            );\n\n            this.setState((state) => ({\n                fileObjects: [].concat(\n                    state.fileObjects,\n                    fileObjs\n                ),\n            }), this.notifyFileChange);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    addFiles = async(newFileObjects) => {\n        const {filesLimit} = this.props;\n        // Update component state\n        this.setState((state) => {\n            // Handle a single file\n            if (filesLimit <= 1) {\n                return {\n                    fileObjects: [].concat(newFileObjects[0]),\n                };\n            }\n\n            // Handle multiple files\n            return {\n                fileObjects: [].concat(\n                    state.fileObjects,\n                    newFileObjects\n                ),\n            };\n        }, this.notifyFileChange);\n    }\n\n    deleteFile = (removedFileObj, removedFileObjIdx) => {\n        event.stopPropagation();\n\n        const {onDelete} = this.props;\n        const {fileObjects} = this.state;\n\n        // Calculate remaining fileObjects array\n        const remainingFileObjs = fileObjects.filter((fileObject, i) => {\n            return i !== removedFileObjIdx;\n        });\n\n        // Notify removed file\n        if (onDelete) {\n            onDelete(removedFileObj.file);\n        }\n\n        // Update local state\n        this.setState({\n            fileObjects: remainingFileObjs,\n        }, this.notifyFileChange);\n    }\n\n    render() {\n        const [, dropzoneAreaProps] = splitDropzoneAreaProps(this.props);\n        const {fileObjects} = this.state;\n\n        return (\n            <DropzoneAreaBase\n                {...dropzoneAreaProps}\n                fileObjects={fileObjects}\n                onAdd={this.addFiles}\n                onDelete={this.deleteFile}\n            />\n        );\n    }\n}\n\nDropzoneArea.defaultProps = {\n    clearOnUnmount: true,\n    filesLimit: 3,\n    initialFiles: [],\n};\n\nDropzoneArea.propTypes = {\n    ...DropzoneAreaBase.propTypes,\n    /** Clear uploaded files when component is unmounted. */\n    clearOnUnmount: PropTypes.bool,\n    /** List containing File objects or URL strings.<br/>\n     * **Note:** Please take care of CORS.\n    */\n    initialFiles: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.any,\n        ])\n    ),\n    /** Maximum number of files that can be loaded into the dropzone. */\n    filesLimit: PropTypes.number,\n    /**\n     * Fired when the files inside dropzone change.\n     *\n     * @param {File[]} loadedFiles All the files currently loaded into the dropzone.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Fired when a file is deleted from the previews panel.\n     *\n     * @param {File} deletedFile The file that was removed.\n     */\n    onDelete: PropTypes.func,\n};\n\nexport default DropzoneArea;\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport DropzoneAreaBase from './DropzoneAreaBase';\n\n// Split props related to DropzoneDialog from DropzoneArea ones\nfunction splitDropzoneDialogProps(allProps) {\n    const {\n        cancelButtonText,\n        dialogProps,\n        dialogTitle,\n        fullWidth,\n        maxWidth,\n        onClose,\n        onSave,\n        open,\n        submitButtonText,\n        ...dropzoneAreaProps\n    } = allProps;\n\n    return [\n        {\n            cancelButtonText,\n            dialogProps,\n            dialogTitle,\n            fullWidth,\n            maxWidth,\n            onClose,\n            onSave,\n            open,\n            submitButtonText,\n        },\n        dropzoneAreaProps,\n    ];\n}\n\n/**\n * This component provides the DropzoneArea inside of a Material-UI Dialog.\n *\n * It supports all the Props and Methods from `DropzoneAreaBase`.\n */\nclass DropzoneDialogBase extends React.PureComponent {\n    render() {\n        const [dropzoneDialogProps, dropzoneAreaProps] = splitDropzoneDialogProps(this.props);\n        const {\n            cancelButtonText,\n            dialogProps,\n            dialogTitle,\n            fullWidth,\n            maxWidth,\n            onClose,\n            onSave,\n            open,\n            submitButtonText,\n        } = dropzoneDialogProps;\n\n        // Submit button state\n        const submitDisabled = dropzoneAreaProps.fileObjects.length === 0;\n\n        return (\n            <Dialog\n                {...dialogProps}\n                fullWidth={fullWidth}\n                maxWidth={maxWidth}\n                onClose={onClose}\n                open={open}\n            >\n                <DialogTitle>{dialogTitle}</DialogTitle>\n\n                <DialogContent>\n                    <DropzoneAreaBase\n                        {...dropzoneAreaProps}\n                    />\n                </DialogContent>\n\n                <DialogActions>\n                    <Button\n                        color=\"primary\"\n                        onClick={onClose}\n                    >\n                        {cancelButtonText}\n                    </Button>\n\n                    <Button\n                        color=\"primary\"\n                        disabled={submitDisabled}\n                        onClick={onSave}\n                    >\n                        {submitButtonText}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nDropzoneDialogBase.defaultProps = {\n    open: false,\n    dialogTitle: 'Upload file',\n    dialogProps: {},\n    fullWidth: true,\n    maxWidth: 'sm',\n    cancelButtonText: 'Cancel',\n    submitButtonText: 'Submit',\n    showPreviews: true,\n    showPreviewsInDropzone: false,\n    showFileNamesInPreview: true,\n};\n\nDropzoneDialogBase.propTypes = {\n    ...DropzoneAreaBase.propTypes,\n    /** Sets whether the dialog is open or closed. */\n    open: PropTypes.bool,\n    /** The Dialog title. */\n    dialogTitle: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.element,\n    ]),\n    /**\n     * Props to pass to the Material-UI Dialog components.\n     * @see See [Material-UI Dialog](https://material-ui.com/api/dialog/#props) for available values.\n     */\n    dialogProps: PropTypes.object,\n    /**\n     * If `true`, the dialog stretches to `maxWidth`.<br/>\n     * Notice that the dialog width grow is limited by the default margin.\n     */\n    fullWidth: PropTypes.bool,\n    /**\n     * Determine the max-width of the dialog. The dialog width grows with the size of the screen.<br/>\n     * Set to `false` to disable `maxWidth`.\n     */\n    maxWidth: PropTypes.string,\n    /** Cancel button text in dialog. */\n    cancelButtonText: PropTypes.string,\n    /** Submit button text in dialog. */\n    submitButtonText: PropTypes.string,\n    /**\n     * Fired when the modal is closed.\n     *\n     * @param {SyntheticEvent} event The react `SyntheticEvent`\n     */\n    onClose: PropTypes.func,\n    /**\n     * Fired when the user clicks the Submit button.\n     *\n     * @param {SyntheticEvent} event The react `SyntheticEvent`\n     */\n    onSave: PropTypes.func,\n    /**\n     * Shows previews **BELOW** the dropzone.<br/>\n     * **Note:** By default previews show up under in the Dialog and inside in the standalone.\n     */\n    showPreviews: PropTypes.bool,\n    /** Shows preview **INSIDE** the dropzone area. */\n    showPreviewsInDropzone: PropTypes.bool,\n    /** Shows file name under the image. */\n    showFileNamesInPreview: PropTypes.bool,\n};\n\nexport default DropzoneDialogBase;\n","import PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {createFileFromUrl, readFile} from '../helpers';\n\nimport DropzoneDialogBase from './DropzoneDialogBase';\n\n\n/**\n * This component provides an uncontrolled version of the DropzoneDialogBase component.\n *\n * It supports all the Props and Methods from `DropzoneDialogBase` but keeps the files state internally.\n *\n * **Note** The `onSave` handler also returns `File[]` with all the accepted files.\n */\nclass DropzoneDialog extends React.PureComponent {\n    state = {\n        fileObjects: [],\n    }\n\n    componentDidMount() {\n        this.loadInitialFiles();\n    }\n\n    componentWillUnmount() {\n        const {clearOnUnmount} = this.props;\n\n        if (clearOnUnmount) {\n            this.setState({\n                fileObjects: [],\n            }, this.notifyFileChange);\n        }\n    }\n\n    notifyFileChange = () => {\n        const {onChange} = this.props;\n        const {fileObjects} = this.state;\n\n        if (onChange) {\n            onChange(fileObjects.map((fileObject) => fileObject.file));\n        }\n    }\n\n    loadInitialFiles = async() => {\n        const {initialFiles} = this.props;\n        try {\n            const fileObjs = await Promise.all(\n                initialFiles.map(async(initialFile) => {\n                    let file;\n                    if (typeof initialFile === 'string' ) {\n                        file = await createFileFromUrl(initialFile);\n                    } else {\n                        file = initialFile;\n                    }\n                    const data = await readFile(file);\n\n                    return {\n                        file,\n                        data,\n                    };\n                })\n            );\n\n            this.setState((state) => ({\n                fileObjects: [].concat(\n                    state.fileObjects,\n                    fileObjs\n                ),\n            }), this.notifyFileChange);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    addFiles = async(newFileObjects) => {\n        const {filesLimit} = this.props;\n        // Update component state\n        this.setState((state) => {\n            // Handle a single file\n            if (filesLimit <= 1) {\n                return {\n                    fileObjects: [].concat(newFileObjects[0]),\n                };\n            }\n\n            // Handle multiple files\n            return {\n                fileObjects: [].concat(\n                    state.fileObjects,\n                    newFileObjects\n                ),\n            };\n        }, this.notifyFileChange);\n    }\n\n    deleteFile = (removedFileObj, removedFileObjIdx) => {\n        event.stopPropagation();\n\n        const {onDelete} = this.props;\n        const {fileObjects} = this.state;\n\n        // Calculate remaining fileObjects array\n        const remainingFileObjs = fileObjects.filter((fileObject, i) => {\n            return i !== removedFileObjIdx;\n        });\n\n        // Notify removed file\n        if (onDelete) {\n            onDelete(removedFileObj.file);\n        }\n\n        // Update local state\n        this.setState({\n            fileObjects: remainingFileObjs,\n        }, this.notifyFileChange);\n    }\n\n    handleClose = (evt) => {\n        const {clearOnUnmount, onClose} = this.props;\n\n        if (onClose) {\n            onClose(evt);\n        }\n\n        if (clearOnUnmount) {\n            this.setState({\n                fileObjects: [],\n            }, this.notifyFileChange);\n        }\n    }\n\n    handleSave = (evt) => {\n        const {clearOnUnmount, onSave} = this.props;\n        const {fileObjects} = this.state;\n\n        if (onSave) {\n            onSave(fileObjects.map((fileObject) => fileObject.file), evt);\n        }\n\n        if (clearOnUnmount) {\n            this.setState({\n                fileObjects: [],\n            }, this.notifyFileChange);\n        }\n    }\n\n    render() {\n        const {fileObjects} = this.state;\n\n        return (\n            <DropzoneDialogBase\n                {...this.props}\n                fileObjects={fileObjects}\n                onAdd={this.addFiles}\n                onDelete={this.deleteFile}\n                onClose={this.handleClose}\n                onSave={this.handleSave}\n            />\n        );\n    }\n}\n\nDropzoneDialog.defaultProps = {\n    clearOnUnmount: true,\n    filesLimit: 3,\n    initialFiles: [],\n};\n\nDropzoneDialog.propTypes = {\n    ...DropzoneDialogBase.propTypes,\n    /** Clear uploaded files when component is unmounted. */\n    clearOnUnmount: PropTypes.bool,\n    /** Maximum number of files that can be loaded into the dropzone. */\n    filesLimit: PropTypes.number,\n    /** List containing File objects or URL strings.<br/>\n     * **Note:** Please take care of CORS.\n    */\n    initialFiles: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.any,\n        ])\n    ),\n    /**\n     * Fired when the user clicks the Submit button.\n     *\n     * @param {File[]} files All the files currently inside the Dropzone.\n     * @param {SyntheticEvent} event The react `SyntheticEvent`.\n     */\n    onSave: PropTypes.func,\n};\n\nexport default DropzoneDialog;\n"]},"metadata":{},"sourceType":"module"}